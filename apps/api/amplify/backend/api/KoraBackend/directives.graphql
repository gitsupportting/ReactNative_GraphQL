# When applied to a type, augments the application with
# owner and group-based authorization rules.
enum AuthStrategy {
    owner
    groups
    private
    public
}
enum AuthProvider {
    apiKey
    iam
    oidc
    userPools
}
enum ModelOperation {
    create
    update
    delete
    read
}

input AuthRule {
    allow: AuthStrategy!
    provider: AuthProvider
    ownerField: String # defaults to "owner" when using owner auth
    identityClaim: String # defaults to "username" when using owner auth
    groupClaim: String # defaults to "cognito:groups" when using Group auth
    groups: [String] # Required when using Static Group auth
    groupsField: String # defaults to "groups" when using Dynamic Group auth
    operations: [ModelOperation] # Required for finer control
}

directive @aws_cognito_user_pools on FIELD_DEFINITION | OBJECT
directive @aws_api_key on FIELD_DEFINITION | OBJECT

directive @auth(rules: [AuthRule!]!) on FIELD_DEFINITION | OBJECT

directive @function(name: String!, region: String) on FIELD_DEFINITION

directive @connection(keyName: String, fields: [String!]) on FIELD_DEFINITION

# Streams data from DynamoDB to Elasticsearch and exposes search capabilities.
directive @searchable(queries: SearchableQueryMap) on OBJECT

input SearchableQueryMap {
    search: String
}

directive @model(queries: ModelQueryMap, mutations: ModelMutationMap, subscriptions: ModelSubscriptionMap) on OBJECT

input ModelMutationMap {
    create: String
    update: String
    delete: String
}

input ModelQueryMap {
    get: String
    list: String
}

enum ModelSubscriptionLevel {
    off
    public
} # "on" throws error
input ModelSubscriptionMap {
    onCreate: [String]
    onUpdate: [String]
    onDelete: [String]
    level: ModelSubscriptionLevel
}
